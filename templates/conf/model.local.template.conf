include "experiment.local"

//data inputs
inputs {
  //additionally add an 'options' field to each segment block
  //additionally add an 'options.partitions' field to each segment block
  mdl-fitting {
    format = "parquet"
    url    = ${experiment.snapshot.prior.modules}/union.normalize/sample.normalized_${experiment.snapshot.prior.run-date}
  }
  train {
    format = "parquet"
    url    = ${experiment.snapshot.prior.modules}/train.test/sample.train_${experiment.snapshot.prior.run-date}
  }
  validation {
    format = "parquet"
    url    = ${experiment.snapshot.prior.modules}/train.test/sample.test_${experiment.snapshot.prior.run-date}
  }
}

//data outputs
outputs {
  //serialization
  template-serialization {
    format    = "tsv"
    delimiter = "\t"
    header    = false
    url       = ${experiment.snapshot.active.module}/${experiment.configure.model}/template-serialization_${experiment.snapshot.active.run-date}
  }
}

//metadata aggregated outputs: as part of module execution (handing for debugging purposes)
meta {
  aggregation {
    format = "parquet"
    header = true
    url    = ${experiment.snapshot.active.module}/${experiment.configure.model}/aggregations_${experiment.snapshot.active.run-date}
  }
  //developer reports
  metrics     {
    format = "csv"
    header = true
    url    = ${experiment.snapshot.active.module}/${experiment.configure.model}/metrics_${experiment.snapshot.active.run-date}
  }
}

//model store restore/serialization
models {
  //trained model serialization
  trained-pipeline {
    name   = "template-modelname"
    format = "pipeline"
    phase  = "train"
    uid    = 0001
    family = "template-modelfamily"
    url    = ${experiment.snapshot.active.module}/${experiment.configure.model}/trained.mdl.pipeline_${experiment.snapshot.active.run-date}
  }
  //trained model serialization
  trained-model {
    name   = "template-modelname"
    format = "model-pipeline"
    uid    = 0001
    phase  = "train"
    family = "template-modelfamily"
    url    = ${experiment.snapshot.active.module}/${experiment.configure.model}/trained.mdl_${experiment.snapshot.active.run-date}
  }
  //tuned model serialization
  tuned-pipeline {
    name   = "template-modelname"
    format = "pipeline"
    uid    = 0002
    phase  = "tuned"
    family = "template-modelfamily"
    url    = ${experiment.snapshot.active.module}/${experiment.configure.model}/tuned.mdl.pipeline_${experiment.snapshot.active.run-date}
  }
  //tuned model serialization
  tuned-model {
    name   = "template-modelname"
    format = "model-pipeline"
    uid    = 0002
    phase  = "tuned"
    family = "template-modelfamily"
    url    = ${experiment.snapshot.active.module}/${experiment.configure.model}/tuned.mdl_${experiment.snapshot.active.run-date}
  }
}


//criteria for model/network evaluation
evaluation {
  features-column     = ""                        //Not appplicable for current <template> model
  label-column        = "rating"                  //Target Label
  prediction-column   = "prediction"              //Output transformation calculation
  metric              = "mpr"                     //Determines the metric how the model is scored: e.g. ["mse","map","mpr"]

  options {                                       //Define how evalaution should be performed
    tuning            = false                     //Determines if the tuning phase should be performed (alternative to properties)
    serving           = false                     //Determines if serving the model
    cross-validation  = false                     //Determines if Train|Test or K-Folds CV should be performed
  }
}

//tune the model/network
tuning {
  numberIter          = [15]                      //corresponds to mdl.maxIter
  ckptInterval        = [10]                      //how often to checkpoint to disk
  ckptPath            = ""                        //checkpoint per: Stack Overflow of long lineage chain, recovery; eliminating temporary shuffle files on disk
  nonNegative         = [false]                   //currently should always be set to false
  parallelism         = -1                        //set for default parallelism
  k-folds             = 4                         //not currently using k-folds CV
}


